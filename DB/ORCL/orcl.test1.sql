CREATE TABLE SETTINGS (

	id NUMBER (20) NOT NULL,
	ccode NVARCHAR2(16) NULL,
	cname NVARCHAR2(16) NULL,
	cformat NVARCHAR2(16) NULL,
	vat NUMBER (2) DEFAULT 0,
);



CREATE TABLE FYEARS (

	id NUMBER (20) NOT NULL PRIMARY KEY,
	code NVARCHAR2(128) NULL,
	name NVARCHAR2(128) NULL,
	status NUMBER (2) DEFAULT 1,
	fromdate NVARCHAR2(128) NULL,
	todate NVARCHAR2(128) NULL,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE JOURNALTYPES (

	id NUMBER (20) NOT NULL PRIMARY KEY,
	code NVARCHAR2(128) NULL,
	name NVARCHAR2(128) NULL,
	status NUMBER (2) DEFAULT 1,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE SUPPLEMENTS (

	id NUMBER (20) NOT NULL PRIMARY KEY,
	code NVARCHAR2(128) NULL,
	name NVARCHAR2(128) NULL,
	status NUMBER (1) DEFAULT 1,
	activedate DATE DEFAULT SYSDATE NOT NULL,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE CHARTOFACCOUNTS (

	id NUMBER NOT NULL PRIMARY KEY,
	code VARCHAR(128) NULL,
	user_id NUMBER NOT NULL,
	accno NVARCHAR2(128) NULL,
	name NVARCHAR2(128) NULL,
	parent_id NUMBER NULL,
	alevel NUMBER(1) NULL,

	gid1 NUMBER NULL,
	gid2 NUMBER NULL,
	gid3 NUMBER NULL,
	gid4 NUMBER NULL,
	gid5 NUMBER NULL,

	ditype NUMBER(1) DEFAULT 0,
	whereto NUMBER(1) DEFAULT 0,
	relation NUMBER(2) DEFAULT 0,

	opndebit NUMBER DEFAULT 0,
	opncredit NUMBER DEFAULT 0,
	clsdebit NUMBER DEFAULT 0,
	clscredit NUMBER DEFAULT 0,
	debit NUMBER DEFAULT 0,
	credit NUMBER DEFAULT 0,

	groupby NUMBER (1) DEFAULT 0,
	status NUMBER (1) DEFAULT 1,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



ALTER TABLE CHARTOFACCOUNTS
ADD updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP;



CREATE TABLE OPENINGBALANCES (

	id NUMBER NOT NULL PRIMARY KEY,
	code VARCHAR(128) NULL,
	chartofaccount_id NUMBER NOT NULL,
	project_id NUMBER NOT NULL,

	user_id NUMBER NOT NULL,
	upuser_id NUMBER NOT NULL,


	name NVARCHAR2(128) NULL,

	opndebit NUMBER DEFAULT 0,
	opncredit NUMBER DEFAULT 0,
	clsdebit NUMBER DEFAULT 0,
	clscredit NUMBER DEFAULT 0,
	debit NUMBER DEFAULT 0,
	credit NUMBER DEFAULT 0,


	status NUMBER (1) DEFAULT 1,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);





drop table FYEARS;
drop table JOURNALTYPES;
drop table SUPPLEMENTS;
drop table CHARTOFACCOUNTS;
drop table OPENINGBALANCES;
drop table JOURNALPOSTS;
drop table JOURNALPOSTDETAILS;




CREATE SEQUENCE AI_SEQ_FYEARS START WITH 1 MINVALUE 1 MAXVALUE 9999999999999999999999999999;
CREATE SEQUENCE AI_SEQ_SUPPLEMENTS START WITH 1 MINVALUE 1 MAXVALUE 9999999999999999999999999999;
CREATE SEQUENCE AI_SEQ_JOURNALTYPES START WITH 1 MINVALUE 1 MAXVALUE 9999999999999999999999999999;
CREATE SEQUENCE AI_SEQ_OPENINGBALANCES START WITH 1 MINVALUE 1 MAXVALUE 9999999999999999999999999999;
CREATE SEQUENCE AI_SEQ_CHARTOFACCOUNTS START WITH 1 MINVALUE 1 MAXVALUE 9999999999999999999999999999;
CREATE SEQUENCE AI_SEQ_JOURNALPOSTS START WITH 1 MINVALUE 1 MAXVALUE 9999999999999999999999999999;
CREATE SEQUENCE AI_SEQ_JOURNALPOSTDETAILS START WITH 1 MINVALUE 1 MAXVALUE 9999999999999999999999999999;




CREATE OR REPLACE TRIGGER FYEARS_AUTO_INCREMENT 
BEFORE INSERT ON FYEARS 
FOR EACH ROW

BEGIN
  SELECT AI_SEQ_FYEARS.NEXTVAL INTO   :NEW.ID FROM   dual;
END;

CREATE OR REPLACE TRIGGER JOURNALTYPES_AUTO_INCREMENT 
BEFORE INSERT ON JOURNALTYPES 
FOR EACH ROW

BEGIN
  SELECT AI_SEQ_JOURNALTYPES.NEXTVAL INTO   :NEW.ID FROM   dual;
END;


CREATE OR REPLACE TRIGGER OPENINGBALANCES_AI
BEFORE INSERT ON OPENINGBALANCES 
FOR EACH ROW

BEGIN
  SELECT AI_SEQ_OPENINGBALANCES.NEXTVAL INTO   :NEW.ID FROM   dual;
END;



CREATE OR REPLACE TRIGGER CHARTOFACCOUNTS_AI
BEFORE INSERT ON CHARTOFACCOUNTS 
FOR EACH ROW

BEGIN
  SELECT AI_SEQ_CHARTOFACCOUNTS.NEXTVAL INTO   :NEW.ID FROM   dual;
END;

CREATE OR REPLACE TRIGGER JOURNALPOSTS_AUTO_INCREMENT 
BEFORE INSERT ON JOURNALPOSTS 
FOR EACH ROW

BEGIN
  SELECT AI_SEQ_JOURNALPOSTS.NEXTVAL INTO   :NEW.ID FROM   dual;
END;


CREATE OR REPLACE TRIGGER JOURNALPOSTDETAILS_AUTO_INCREMENT 
BEFORE INSERT ON JOURNALPOSTDETAILS 
FOR EACH ROW

BEGIN
  SELECT AI_SEQ_JOURNALPOSTDETAILS.NEXTVAL INTO   :NEW.ID FROM   dual;
END;




CREATE OR REPLACE TRIGGER BIN_BUP_CHARTOFACCOUNTS_TR
BEFORE INSERT OR UPDATE ON CHARTOFACCOUNTS FOR EACH ROW

BEGIN
  IF INSERTING THEN
    :NEW.CODE := TO_CHAR(SYSDATE,'MM') + TO_CHAR(SYSDATE,'YYYY') + AI_SEQ_CHARTOFACCOUNTS.CURRVAL;
  END IF;

  IF UPDATING THEN
    :NEW.UPDATEDAT := CURRENT_TIMESTAMP;
  END IF;

END;






CREATE TABLE SUPPLEMENTS (

	id NUMBER (20) NOT NULL PRIMARY KEY,
	code NVARCHAR2(128) NULL,
	name NVARCHAR2(128) NULL,
	status NUMBER (1) DEFAULT 1,
	activedate DATE DEFAULT SYSDATE NOT NULL,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);




CREATE SEQUENCE AI_SEQ_SUPPLEMENTS START WITH 1 MINVALUE 1 MAXVALUE 9999999999999999999999999999;

CREATE OR REPLACE TRIGGER BIN_BUP_SUPPLEMENTS_TR
BEFORE INSERT OR UPDATE ON SUPPLEMENTS FOR EACH ROW

BEGIN
  IF INSERTING THEN
  	SELECT AI_SEQ_SUPPLEMENTS.NEXTVAL INTO   :NEW.ID FROM   dual;
    :NEW.CODE := TO_CHAR(SYSDATE,'YYYY') + AI_SEQ_SUPPLEMENTS.CURRVAL;

  END IF;

  IF UPDATING THEN
    :NEW.UPDATEDAT := CURRENT_TIMESTAMP;
  END IF;

END;




CREATE SEQUENCE AI_SEQ_CHARTOFACCOUNTS START WITH 1 MINVALUE 1 MAXVALUE 9999999999999999999999999999;

CREATE OR REPLACE TRIGGER BIN_BUP_CHARTOFACCOUNTS_TR
BEFORE INSERT OR UPDATE ON CHARTOFACCOUNTS FOR EACH ROW

BEGIN
  IF INSERTING THEN
  	SELECT AI_SEQ_CHARTOFACCOUNTS.NEXTVAL INTO   :NEW.ID FROM   dual;
    :NEW.CODE := TO_CHAR(SYSDATE,'YYYY') + AI_SEQ_CHARTOFACCOUNTS.CURRVAL;

  END IF;

  IF UPDATING THEN
    :NEW.UPDATEDAT := CURRENT_TIMESTAMP;
  END IF;

END;

CREATE OR REPLACE TRIGGER BIN_BUP_OPENINGBALANCES_TR
BEFORE INSERT OR UPDATE ON OPENINGBALANCES FOR EACH ROW

BEGIN
  IF INSERTING THEN
  	SELECT AI_SEQ_OPENINGBALANCES.NEXTVAL INTO   :NEW.ID FROM   dual;
    :NEW.CODE := TO_CHAR(SYSDATE,'YYYY') + AI_SEQ_OPENINGBALANCES.CURRVAL;

  END IF;

  IF UPDATING THEN
    :NEW.UPDATEDAT := CURRENT_TIMESTAMP;
  END IF;

END;




CREATE SEQUENCE AI_SEQ_JOURNALPOSTS START WITH 1 MINVALUE 1 MAXVALUE 9999999999999999999999999999;

CREATE TABLE JOURNALPOSTS (

	id NUMBER (20) NOT NULL PRIMARY KEY,
	code NVARCHAR2(128) NULL,
	fyear_id NUMBER NOT NULL,
	project_id NUMBER NOT NULL,
	branch_id NUMBER NOT NULL,
	user_id NUMBER NOT NULL,
  upuser_id NUMBER NULL,
  vchno NVARCHAR2(64) NULL,
  narration NVARCHAR2(256) NULL,
  vchdate DATE NULL,
  vchtype_id NUMBER NULL,
	debit NUMBER DEFAULT 0,
	credit NUMBER DEFAULT 0,
	status NUMBER (2) DEFAULT 1,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE OR REPLACE TRIGGER BIN_BUP_JOURNALPOSTS_TR
BEFORE INSERT OR UPDATE ON JOURNALPOSTS FOR EACH ROW

BEGIN
  IF INSERTING THEN
  	SELECT AI_SEQ_JOURNALPOSTS.NEXTVAL INTO   :NEW.ID FROM   dual;
    :NEW.CODE := TO_CHAR(SYSDATE,'YYYY') + AI_SEQ_JOURNALPOSTS.CURRVAL;

  END IF;

  IF UPDATING THEN
    :NEW.UPDATEDAT := CURRENT_TIMESTAMP;
  END IF;

END;





CREATE SEQUENCE AI_SEQ_JOURNALPOSTDETAILS START WITH 1 MINVALUE 1 MAXVALUE 9999999999999999999999999999;



CREATE TABLE JOURNALPOSTDETAILS (

	id NUMBER (20) NOT NULL PRIMARY KEY,
	code NVARCHAR2(128) NULL,

	journalpost_id NUMBER (20) NOT NULL,
	chartofaccount_id NUMBER NOT NULL,
	project_id NUMBER NOT NULL,
	branch_id NUMBER NOT NULL,

	user_id NUMBER NOT NULL,
  upuser_id NUMBER NULL,

  vchno NVARCHAR2(64) NULL,
  remarks NVARCHAR2(256) NULL,
  vchdate DATE NULL,
  vchtype_id NUMBER NULL,
  
	debit NUMBER DEFAULT 0,
	credit NUMBER DEFAULT 0,

	ditype NUMBER(1) DEFAULT 0,
	whereto NUMBER(1) DEFAULT 0,
	relation NUMBER(2) DEFAULT 0,

	status NUMBER (2) DEFAULT 1,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



CREATE OR REPLACE TRIGGER BIN_BUP_JOURNALPOSTDETAILS_TR
BEFORE INSERT OR UPDATE ON JOURNALPOSTDETAILS FOR EACH ROW

BEGIN
  IF INSERTING THEN
  	SELECT AI_SEQ_JOURNALPOSTDETAILS.NEXTVAL INTO   :NEW.ID FROM   dual;
    :NEW.CODE := TO_CHAR(SYSDATE,'YYYY') + AI_SEQ_JOURNALPOSTDETAILS.CURRVAL;

  END IF;

  IF UPDATING THEN
    :NEW.UPDATEDAT := CURRENT_TIMESTAMP;
  END IF;

END;




CREATE SEQUENCE AI_SEQ_VCHTYPES START WITH 1 MINVALUE 1 MAXVALUE 9999999999999999999999999999;


CREATE TABLE VCHTYPES (

	id NUMBER (20) NOT NULL PRIMARY KEY,
	code NVARCHAR2(128) NULL,
	name NVARCHAR2(128) NULL,
	status NUMBER (1) DEFAULT 1,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE OR REPLACE TRIGGER BIN_BUP_VCHTYPES_TR
BEFORE INSERT OR UPDATE ON VCHTYPES FOR EACH ROW

BEGIN
  IF INSERTING THEN
  	SELECT AI_SEQ_VCHTYPES.NEXTVAL INTO   :NEW.ID FROM   dual;
    :NEW.CODE := TO_CHAR(SYSDATE,'YYYY') + AI_SEQ_VCHTYPES.CURRVAL;

  END IF;

  IF UPDATING THEN
    :NEW.UPDATEDAT := CURRENT_TIMESTAMP;
  END IF;

END;





CREATE SEQUENCE AI_SEQ_FYEARS START WITH 1 MINVALUE 1 MAXVALUE 9999999999999999999999999999;


CREATE TABLE FYEARS (

	id NUMBER (20) NOT NULL PRIMARY KEY,
	code NVARCHAR2(128) NULL,
	name NVARCHAR2(128) NULL,
	fydstart DATE NULL,
	fydend DATE NULL,
	status NUMBER (1) DEFAULT 1,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE OR REPLACE TRIGGER BIN_BUP_FYEARS_TR
BEFORE INSERT OR UPDATE ON FYEARS FOR EACH ROW

BEGIN
  IF INSERTING THEN
  	SELECT AI_SEQ_FYEARS.NEXTVAL INTO   :NEW.ID FROM   dual;
    :NEW.CODE := TO_CHAR(SYSDATE,'YYYY') + AI_SEQ_FYEARS.CURRVAL;

  END IF;

  IF UPDATING THEN
    :NEW.UPDATEDAT := CURRENT_TIMESTAMP;
  END IF;

END;


relaccounts

CREATE SEQUENCE AI_SEQ_RELACCOUNTS START WITH 1 MINVALUE 1 MAXVALUE 9999999999999999999999999999;


CREATE TABLE RELACCOUNTS (

	id NUMBER (20) NOT NULL PRIMARY KEY,
	code NVARCHAR2(128) NULL,
	name NVARCHAR2(128) NULL,
	status NUMBER (1) DEFAULT 1,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE OR REPLACE TRIGGER BIN_BUP_RELACCOUNTS_TR
BEFORE INSERT OR UPDATE ON RELACCOUNTS FOR EACH ROW

BEGIN
  IF INSERTING THEN
  	SELECT AI_SEQ_RELACCOUNTS.NEXTVAL INTO   :NEW.ID FROM   dual;
    :NEW.CODE := TO_CHAR(SYSDATE,'YYYY') + AI_SEQ_RELACCOUNTS.CURRVAL;

  END IF;

  IF UPDATING THEN
    :NEW.UPDATEDAT := CURRENT_TIMESTAMP;
  END IF;

END;



CREATE OR REPLACE TRIGGER A_IN_UP_DEL_OPENINGBALANCES_TR
AFTER INSERT OR UPDATE OR DELETE ON OPENINGBALANCES FOR EACH ROW
DECLARE username VARCHAR2(64);
BEGIN
  SELECT user INTO username FROM dual;
  IF INSERTING THEN
    DBMS_OUTPUT.PUT_LINE('ONE ROW INSERTED BY : ' || username);
  ELSIF UPDATING THEN
    INSERT INTO OPENINGBALANCELOGS (id,upuser_id,chartofaccount_id,project_id,opndebit,opncredit,status) VALUES  (:OLD.id,:NEW.upuser_id,:NEW.chartofaccount_id,:NEW.project_id,:OLD.opndebit,:OLD.opncredit,'2');
  ELSIF DELETING THEN
    INSERT INTO OPENINGBALANCELOGS (id,upuser_id,chartofaccount_id,project_id,opndebit,opncredit,status) VALUES  (:OLD.id,:NEW.upuser_id,:NEW.chartofaccount_id,:NEW.project_id,:OLD.opndebit,:OLD.opncredit,'3');
  END IF;
END;



CREATE TABLE OPENINGBALANCELOGS (

	id NUMBER NULL,
	upuser_id NUMBER NULL,
	CHARTOFACCOUNT_ID NUMBER NULL,
	PROJECT_ID NUMBER NULL,

	opndebit NUMBER DEFAULT 0,
	opncredit NUMBER DEFAULT 0,
	status NUMBER (1) DEFAULT 1,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE OPENINGBALANCELOGS
ADD CHARTOFACCOUNT_ID NUMBER NULL;
ADD PROJECT_ID NUMBER NULL;

TRUNCATE TABLE OPENINGBALANCELOGS;
DROP TABLE OPENINGBALANCELOGS;
DROP TRIGGER A_IN_UP_DEL_OPENINGBALANCES_TR;


SELECT * FROM OPENINGBALANCES;
SELECT * FROM OPENINGBALANCELOGS;
UPDATE OPENINGBALANCES SET OPNDEBIT = 4000, UPUSER_ID = 283 WHERE ID = 23;
INSERT INTO OPENINGBALANCES (USER_ID,CHARTOFACCOUNT_ID,PROJECT_ID,OPNDEBIT,OPNCREDIT) VALUES (283,65,22,2000,0);
DELETE FROM OPENINGBALANCES WHERE ID = 25;