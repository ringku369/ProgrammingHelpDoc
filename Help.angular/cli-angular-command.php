<?php  

first uninstall from c panel then install update version to update node // to update node version

npm install -g npm // to update npm version


node -v
npm -v
ng version

npm update


npm uninstall -g angular-cli // to update nangular cli
npm cache clean --force



npm install -g @angular/cli@latest
ng new --help
ng new projectname - d
ng new projectname --routing --style=scss
ng new frontend --routing --style=css

ng serve --open



ng g c home -it -is --skip-tests -d (it = inline style, it = inline template)
ng g c home -s -t  --skip-tests -d (same command)
ng g c home -s -t  --spec=false -d (same command)

// --flat --module=app only for module creating

ng g c components/modal/ -it -is --skip-tests -d


ng g module demo-routing --flat // --flat for roort path
ng g module demo-routing --flat --module=app // --flat for roort path and --module=app for registaring on module.app 


ng g c components/admin/dashboard -it -is --skip-tests -d
ng g c components/admin/dashboard --skip-tests

ng g service services/admin/dashboard --skip-tests -d

//class service is create in root path

ng g class student         
ng g service student
ng g cl app.routing --skip-tests



ng g c page/home --skip-tests

ng add @angular/material


ng build --prod

//package.json > dependencies
npm install -save plugin name
npm i -s bootstrap@4.* jquery@latest ngx-bootstrap

npm install --save font-awesome angular-font-awesome

npm install ngx-bootstrap --save
ng add ngx-bootstrap

npm i ng2-search-filter --save


npm install ngx-toastr --save

npm install @angular/animations --save
npm install ngx-spinner --save
ng add ngx-spinner




npm install -save mdb-calendar
// angular.json
"./node_modules/bootstrap/dist/css/bootstrap.min.css",
"./node_modules/jquery/dist/jquery.min.js",
"./node_modules/bootstrap/dist/js/bootstrap.min.js"
"./node_modules/ngx-toastr/toastr.css"


@import '~bootstrap/dist/css/bootstrap.css';


import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
// Import library module
import { NgxSpinnerModule } from "ngx-spinner";

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';

import { CommonModule } from '@angular/common';
import { ToastrModule } from 'ngx-toastr';

import { FormsModule } from '@angular/forms';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { BsDatepickerModule } from 'ngx-bootstrap/datepicker';



// this.loginservice.getdistrict().subscribe(
//   (response: any) => {
//     this.success = response;
//   },
//   (error: any) => {
//     this.errors = error.error;
//   }
// );



1.(a) Define a class named Rectangle and create two objects of rectangle. Now compare the two objects using operator overloading. If we want to add built in types data, then do you think that operator overloading is needed or not? Explain it.


1.(b) Let there is a class Fruit which has a member function color() which displays “color is Green” . Class Mango and class Banana inherits class Fruit and class Orange inherits both class Mango and class Banana. Will there any problem if we call color() function from the object of class Orange? If any, then how can we solve it? Write the solved program.

2.(a) class X{ int m,n;};Suppose there is an object of X named obj. Will there any problem if You want to perform the following operations obj+33 and 33+obj using member operator function? If any, then how can we solve it? Also for showing the object, overload output operator. Write the solved code.


2.(b) Suppose a base class contains private, protected and public members. If a derived class wants to access private members, is it possible or not? If a derived class wants to access protected members, is it possible or not. If a derived class object wants to access private or protected members, is it possible or not. Explain the above questions with an example.


3.(a) Write a class Array which has two member function insert() where you can input value of the array and getvalue() which shows the value of the array. The Array objects are three types: integer, character, and float. You cannot overload any function. Complete the task.


3.(b) Why do we need to handle the exceptions generated by program? Write a function that will return the minimum of three values. User may input any values of primitive data types which will be passed to the function parameter. Implement the program without using the function overloading.



4.(a) Create an abstract class named Phone. Phone will have only one function callRecieve(). Create derived class Landline and Mobile. Landline will define callRecieve() so that it will output “Pick Receiver” and similarly Mobile will output “Press Receive Button” from callRecieve(). In the main() function , use Phone class in a way that shows the way of receiving the call.

4.(b) Write a program using three classes named Alpha, Beta, Gamma where the constructor of each class takes one character value as argument and the constructor contains the message “In alpha class”, “In beta class” and in “In gamma class” respectively. Complete the program considering the following case: Beta inherits Alpha and Gamma inherits Beta. Now complete the code. “Virtual function is an example of late binding”. Explain the statement.






Answer to the question no 1(b)
=================================
Solved program written below as per question


#include <iostream>
using namespace std;
class Fruit {
  public:
    void color();
};

void Fruit::color(){
  cout << "color is Green" << endl ;
}

class Mango : Fruit {
  public:
    void getcolor1(){
      color();
    }
};

class Banana : Fruit {
  public:
    void getcolor2(){
      color();
    }
};


class Orange : Mango, Banana {
  public:
    void getcolor3(){
      getcolor1();
    }

    void getcolor4(){
      getcolor2();
    }
};


int main(){
  Orange Obj;
  Obj.getcolor3();
  Obj.getcolor4();

  return 0;
}


Answer to the question no 4(a)
=================================
Solved program written below as per question

#include <iostream>
using namespace std;

class Phone {
  public:
      virtual void callRecieve() = 0;
};

class Landline: public Phone {
  public:
      void callRecieve(){
        cout << "Pick Receiver" << endl;
      }
};

class Mobile: public Phone {
  public:
      void callRecieve(){
        cout << "Press Receive Button" << endl;
      }
};

int main(){
  Phone *p;
  Landline obj2;
  Mobile obj3;

  p = &obj2;
  p->callRecieve();

  p = &obj3;
  p->callRecieve();

  return 0;
}














Answer to the question no 2(b)
=================================


#include <iostream>
using namespace std;
class Base {
  public:
    void PBLF() {
      cout << "This message from public function in base" << endl ;
    }
  protected:
    void PROF() {
      cout << "This message from protected function in base" << endl ;
    }

  private:
    void PRIF() {
      cout << "This message from private function in base" << endl ;
    }
};

class Derived:Base{
  public:
    void MYF() {
      PROF();
    }
};


int main(){
  Derived dobj;
  dobj.MYF();
  return 0;
}


Accordingly my above example  base class name is Base and derived class name is Derived and it's inherited with base class. There are three members in base class such as public function name is PBLF or protected function name is PROF and private function name is PRIF.  Now If a derived class wants to access private members ( PRIF()) in this case it's not possible accessing to private members becase private member only use in itself class.  But If a derived class object wants to access public ( PBLF() ) or protected ( PROF() ) members then it's possible to accessing to protected or public members...























?>